// Autogenerated Detail test, do not edit.

const originalEnvironment = process.env;
process.env.COPYSCAPE_USERNAME = "UNKNOWN";
process.env.COPYSCAPE_KEY = "REDACTED";
process.env.JUNE_KEY = "REDACTED";
process.env.MG_API_KEY = "REDACTED";
process.env.BUGSNAG_KEY = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
process.env.NANGO = "REDACTED";
process.env.SCREENSHOT_ONE_ACCESS_KEY = "REDACTED";
process.env.SCREENSHOT_ONE_SECRET_KEY = "REDACTED";
process.env.__DETAIL_TEST_MODE = "true";

import { libraries, request, utils } from "@detail-dev/replay";
import crypto from "crypto";
import { createClient } from "redis";

jest.mock("crypto", () => {
  const mCrypto = {
    ...jest.requireActual("crypto"),
    pseudoRandomBytes: jest.fn(),
  };
  return mCrypto;
});
jest.mock("redis", () => libraries.RedisInterceptor.createMock());

describe("POST /api/v4/tasks/user", () => {
  let response: request.Response;
  let httpInterceptor: libraries.HttpInterceptor;

  // Set up crypto fixtures.
  const cryptoCallsExpected = [
    {
      library: "crypto",
      input: {
        functionName: "randomBytes",
        args: [5],
      },
      output: {
        type: "Buffer",
        data: [8, 248, 113, 25, 236],
      },
      id: "442f2057c1753dc3",
      timestamp: 1715711549203000,
      startup: true,
    },
    {
      library: "crypto",
      input: {
        functionName: "randomBytes",
        args: [16],
      },
      output: {
        type: "Buffer",
        data: [
          180, 236, 237, 16, 110, 219, 146, 238, 126, 38, 168, 140, 205, 212,
          221, 120,
        ],
      },
      id: "bdd011245180a8fc",
      timestamp: 1715711549215000,
      startup: true,
    },
    {
      library: "crypto",
      input: {
        functionName: "randomBytes",
        args: [16],
      },
      output: {
        type: "Buffer",
        data: [
          116, 10, 242, 165, 56, 32, 80, 201, 109, 203, 153, 83, 220, 179, 90,
          161,
        ],
      },
      id: "46ef1fcdec824bff",
      timestamp: 1715711549216000,
      startup: true,
    },
    {
      library: "crypto",
      input: {
        functionName: "randomBytes",
        args: [16],
      },
      output: {
        type: "Buffer",
        data: [
          107, 239, 239, 76, 158, 177, 200, 16, 46, 12, 106, 156, 128, 248, 44,
          17,
        ],
      },
      id: "f062b03a2296796a",
      timestamp: 1715711549217000,
      startup: true,
    },
    {
      library: "crypto",
      input: {
        functionName: "randomBytes",
        args: [16],
      },
      output: {
        type: "Buffer",
        data: [
          6, 169, 36, 112, 180, 204, 220, 129, 240, 105, 184, 111, 145, 42, 12,
          123,
        ],
      },
      id: "2aba6ea91ed1e9be",
      timestamp: 1715711549219000,
      startup: true,
    },
    {
      library: "crypto",
      input: {
        functionName: "randomBytes",
        args: [16],
      },
      output: {
        type: "Buffer",
        data: [
          55, 206, 250, 126, 189, 142, 84, 126, 39, 149, 110, 82, 130, 152, 22,
          92,
        ],
      },
      id: "657f01cad6866157",
      timestamp: 1715711549220000,
      startup: true,
    },
    {
      library: "crypto",
      input: {
        functionName: "randomBytes",
        args: [16],
      },
      output: {
        type: "Buffer",
        data: [
          176, 174, 150, 55, 64, 92, 87, 203, 193, 246, 169, 128, 114, 42, 33,
          239,
        ],
      },
      id: "fb74fa3188b8bd8a",
      timestamp: 1715711549223000,
      startup: true,
    },
    {
      library: "crypto",
      input: {
        functionName: "randomBytes",
        args: [16],
      },
      output: {
        type: "Buffer",
        data: [
          42, 251, 223, 107, 142, 31, 233, 46, 84, 233, 26, 173, 242, 11, 153,
          5,
        ],
      },
      id: "25a2cdb73fdb71f3",
      timestamp: 1715711549224000,
      startup: true,
    },
    {
      library: "crypto",
      input: {
        functionName: "pseudoRandomBytes",
        args: [32],
      },
      output: {
        type: "Buffer",
        data: [
          113, 94, 30, 148, 85, 6, 40, 29, 112, 193, 211, 208, 226, 140, 248,
          228, 219, 39, 204, 8, 123, 127, 3, 29, 231, 119, 24, 63, 107, 108,
          180, 87,
        ],
      },
      id: "06d858507c3e8c88",
      timestamp: 1715711604662000,
      startup: false,
    },
  ];
  let cryptoInterceptor: libraries.CryptoInterceptor;

  const OriginalDate = Date;
  // Set up date fixtures.
  const dateCallsExpected = [
    {
      library: "date",
      input: "now",
      output: "1715711604664",
      id: "fe3ae309a23a2440",
      timestamp: 1715711604664000,
      startup: false,
    },
    {
      library: "date",
      input: "Date.new",
      output: "2024-05-14T18:33:24.665Z",
      id: "afba35e7551f14b1",
      timestamp: 1715711604665000,
      startup: false,
    },
    {
      library: "date",
      input: "Date.new",
      output: "2024-05-14T18:33:24.666Z",
      id: "30e565947e41a037",
      timestamp: 1715711604666000,
      startup: false,
    },
    {
      library: "date",
      input: "Date.new",
      output: "2024-05-14T18:33:24.673Z",
      id: "cb74370b917f5848",
      timestamp: 1715711604673000,
      startup: false,
    },
    {
      library: "date",
      input: "now",
      output: "1715711604676",
      id: "aa4c31e061e552b5",
      timestamp: 1715711604676000,
      startup: false,
    },
    {
      library: "date",
      input: "now",
      output: "1715711604676",
      id: "0164df95eee1c11c",
      timestamp: 1715711604676000,
      startup: false,
    },
    {
      library: "date",
      input: "now",
      output: "1715711604679",
      id: "f48b283644c4b4bd",
      timestamp: 1715711604679000,
      startup: false,
    },
    {
      library: "date",
      input: "now",
      output: "1715711604679",
      id: "fbf42c977c309986",
      timestamp: 1715711604679000,
      startup: false,
    },
    {
      library: "date",
      input: "now",
      output: "1715711604680",
      id: "f98ba8fce36120cd",
      timestamp: 1715711604680000,
      startup: false,
    },
    {
      library: "date",
      input: "now",
      output: "1715711604681",
      id: "9c43b30d322da29a",
      timestamp: 1715711604681000,
      startup: false,
    },
    {
      library: "date",
      input: "now",
      output: "1715711604682",
      id: "039a215b7f04709d",
      timestamp: 1715711604682000,
      startup: false,
    },
    {
      library: "date",
      input: "now",
      output: "1715711604682",
      id: "4916486bdf249dd2",
      timestamp: 1715711604682000,
      startup: false,
    },
    {
      library: "date",
      input: "now",
      output: "1715711604688",
      id: "1e91b111c6646c0f",
      timestamp: 1715711604688000,
      startup: false,
    },
    {
      library: "date",
      input: "Date.new",
      output: "2024-05-14T18:33:24.689Z",
      id: "cdf3a62a9611fb3b",
      timestamp: 1715711604689000,
      startup: false,
    },
    {
      library: "date",
      input: "Date.new",
      output: "2024-05-14T18:33:24.689Z",
      id: "f1cf9d5456a29062",
      timestamp: 1715711604689000,
      startup: false,
    },
    {
      library: "date",
      input: "now",
      output: "1715711604697",
      id: "78af81bf97e25d73",
      timestamp: 1715711604697000,
      startup: false,
    },
    {
      library: "date",
      input: "now",
      output: "1715711604698",
      id: "4d60465fbc5beb26",
      timestamp: 1715711604698000,
      startup: false,
    },
    {
      library: "date",
      input: "now",
      output: "1715711604698",
      id: "4ac16377592dad5f",
      timestamp: 1715711604698000,
      startup: false,
    },
    {
      library: "date",
      input: "now",
      output: "1715711604699",
      id: "42df68a29d23110d",
      timestamp: 1715711604699000,
      startup: false,
    },
    {
      library: "date",
      input: "Date.new",
      output: "2024-05-14T18:33:24.699Z",
      id: "1d511f858767500e",
      timestamp: 1715711604699000,
      startup: false,
    },
    {
      library: "date",
      input: "Date.new",
      output: "2024-05-14T18:33:24.699Z",
      id: "52aa539137d777c4",
      timestamp: 1715711604699000,
      startup: false,
    },
    {
      library: "date",
      input: "Date.new",
      output: "2024-05-14T18:33:24.699Z",
      id: "60950e0b73c8a849",
      timestamp: 1715711604699000,
      startup: false,
    },
    {
      library: "date",
      input: "Date.new",
      output: "2024-05-14T18:33:24.700Z",
      id: "1a91e413acc4898b",
      timestamp: 1715711604699000,
      startup: false,
    },
    {
      library: "date",
      input: "Date.new",
      output: "2024-05-14T18:33:24.700Z",
      id: "0f2a7b72718ed3a4",
      timestamp: 1715711604700000,
      startup: false,
    },
    {
      library: "date",
      input: "Date.new",
      output: "2024-05-14T18:33:24.700Z",
      id: "2b1756abef51616b",
      timestamp: 1715711604700000,
      startup: false,
    },
    {
      library: "date",
      input: "Date.new",
      output: "2024-05-14T18:33:24.700Z",
      id: "3744c7e63928ebc2",
      timestamp: 1715711604700000,
      startup: false,
    },
    {
      library: "date",
      input: "Date.new",
      output: "2024-05-14T18:33:24.701Z",
      id: "032a021a78edca85",
      timestamp: 1715711604701000,
      startup: false,
    },
    {
      library: "date",
      input: "now",
      output: "1715711604702",
      id: "9db443cc14894be3",
      timestamp: 1715711604702000,
      startup: false,
    },
    {
      library: "date",
      input: "Date.new",
      output: "2024-05-14T18:33:24.702Z",
      id: "b298ce777c97d1b5",
      timestamp: 1715711604702000,
      startup: false,
    },
    {
      library: "date",
      input: "Date.new",
      output: "2024-05-14T18:33:24.703Z",
      id: "00f3b19d154160d2",
      timestamp: 1715711604703000,
      startup: false,
    },
  ];
  let dateInterceptor: libraries.DateInterceptor;

  let redis: any;
  let redisInterceptor: libraries.RedisInterceptor;

  const EXPECTED_BODY =
    '{"success":true,"data":[{"up":true,"down":false,"counterUp":0,"counterDown":0,"frequency":"daily","history":[],"type":"habit","text":"Add a task to Habitica","notes":"Either a Habit, a Daily, or a To Do","tags":[],"value":0,"priority":1,"attribute":"str","challenge":{},"group":{"completedBy":{},"assignedUsers":[]},"byHabitica":false,"reminders":[],"_id":"70b730b6-739b-46d0-99aa-eb24bb6be184","createdAt":"2024-05-14T18:33:24.676Z","updatedAt":"2024-05-14T18:33:24.676Z","userId":"de2b7530-9d40-4ce7-9a82-210b2ba93564","id":"70b730b6-739b-46d0-99aa-eb24bb6be184"},{"up":false,"down":true,"counterUp":0,"counterDown":0,"frequency":"daily","history":[],"type":"habit","text":"Click here to edit this into a bad habit you\'d like to quit","notes":"Or delete from the edit screen","tags":[],"value":0,"priority":1,"attribute":"str","challenge":{},"group":{"completedBy":{},"assignedUsers":[]},"byHabitica":false,"reminders":[],"_id":"f17d7cdf-9b9a-4275-b338-e274dc9e6730","createdAt":"2024-05-14T18:33:24.679Z","updatedAt":"2024-05-14T18:33:24.679Z","userId":"de2b7530-9d40-4ce7-9a82-210b2ba93564","id":"f17d7cdf-9b9a-4275-b338-e274dc9e6730"},{"completed":false,"collapseChecklist":false,"type":"todo","text":"Join Habitica (Check me off!)","notes":"You can either complete this To Do, edit it, or remove it.","tags":[],"value":0,"priority":1,"attribute":"str","challenge":{},"group":{"completedBy":{},"assignedUsers":[]},"byHabitica":true,"checklist":[],"reminders":[],"_id":"b758ec7e-50b4-47bf-a787-cc1676eef804","createdAt":"2024-05-14T18:33:24.680Z","updatedAt":"2024-05-14T18:33:24.681Z","userId":"de2b7530-9d40-4ce7-9a82-210b2ba93564","id":"b758ec7e-50b4-47bf-a787-cc1676eef804"},{"type":"reward","text":"Reward yourself","notes":"Watch TV, play a game, eat a treat, it\'s up to you!","tags":[],"value":10,"priority":1,"attribute":"str","challenge":{},"group":{"completedBy":{},"assignedUsers":[]},"byHabitica":false,"reminders":[],"_id":"00c723be-a85a-47d1-b132-58ff10321c28","createdAt":"2024-05-14T18:33:24.682Z","updatedAt":"2024-05-14T18:33:24.682Z","userId":"de2b7530-9d40-4ce7-9a82-210b2ba93564","id":"00c723be-a85a-47d1-b132-58ff10321c28"}],"notifications":[],"userV":4,"appVersion":"5.24.2"}';
  const EXPECTED_RESPONSE_HEADER = {
    "x-dns-prefetch-control": "off",
    "x-frame-options": "SAMEORIGIN",
    "strict-transport-security": "max-age=15552000; includeSubDomains",
    "x-download-options": "noopen",
    "x-content-type-options": "nosniff",
    "x-xss-protection": "0",
    "access-control-allow-methods": "OPTIONS,GET,POST,PUT,HEAD,DELETE",
    "access-control-allow-headers":
      "Authorization,Content-Type,Accept,Content-Encoding,X-Requested-With,x-api-user,x-api-key,x-client",
    "access-control-expose-headers":
      "X-RateLimit-Limit,X-RateLimit-Remaining,X-RateLimit-Reset,Retry-After",
    "x-powered-by": "Express",
    "cache-control": "no-store",
    "content-type": "application/json; charset=utf-8",
    "content-encoding": "gzip",
  };

  beforeEach(() => {
    redis = createClient({});
  });

  afterEach(async () => {
    global.Date = OriginalDate;
    jest.clearAllMocks();
    process.env = originalEnvironment;

    // Emit test results.
    utils.serializeTestResults("generated/test_results/15.json", {
      traceId: "2a62537ad9e53b64101131c73ee33bee",
      testFile: __filename.split("/").pop() as string,
      request: {
        pathKey: "/api/v4/tasks/user",
        route: "/api/v4/tasks/user",
        method: "POST",
      },
      response: {
        expected: {
          status: 201,
          body: EXPECTED_BODY,
          header: EXPECTED_RESPONSE_HEADER,
        },
        observed: {
          status: response.status,
          body:
            response.headers && response.headers["content-length"] == 0
              ? undefined
              : response.text || JSON.stringify(response.body),
          header: libraries.canonicalizeResHeaders(response.header),
        },
      },
      expectedCalls: [...cryptoCallsExpected, ...dateCallsExpected],
      observedCalls: [
        ...httpInterceptor.getObservedCalls(),
        ...cryptoInterceptor.getObservedCalls(),
        ...dateInterceptor.getObservedCalls(),
        ...redisInterceptor.getObservedCalls(),
      ],
    });
  });

  it("should run as expected with example data", async () => {
    // @ts-expect-error we manage http mocking globally, so that we can reuse a
    // global polly server. We pass in hooks to manage the global state here.
    httpInterceptor = new libraries.HttpInterceptor(global.__HTTP_CALL_HOOKS__);
    httpInterceptor.expectCalls([]);

    cryptoInterceptor = new libraries.CryptoInterceptor(crypto);
    cryptoInterceptor.expectCalls(cryptoCallsExpected);

    dateInterceptor = new libraries.DateInterceptor();
    dateInterceptor.expectCalls(dateCallsExpected);

    redisInterceptor = new libraries.RedisInterceptor(redis);
    redisInterceptor.expectCalls([]);

    // Import the app.
    const { app } = await import("../config");

    // Make the request.
    response = await request(app)
      .post("/api/v4/tasks/user")
      .set("x-forwarded-host", "localhost:8080")
      .set("x-forwarded-proto", "http")
      .set("x-forwarded-port", "8080")
      .set("x-forwarded-for", "127.0.0.1")
      .set("x-client", "habitica-web")
      .set("sec-fetch-dest", "empty")
      .set("content-type", "application/json")
      .set("connection", "close")
      .set("referer", "http://localhost:8080/")
      .set(
        "user-agent",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.3 Safari/605.1.15",
      )
      .set("origin", "http://localhost:8080")
      .set("accept-encoding", "gzip, deflate")
      .set("sec-fetch-mode", "cors")
      .set("x-api-key", "99f2973b-fb2a-45da-a585-310c424c7ebc")
      .set("accept-language", "en-US,en;q=0.9")
      .set("x-user-timezoneoffset", "420")
      .set("sec-fetch-site", "same-origin")
      .set("accept", "application/json, text/plain, */*")
      .set(
        "cookie",
        "__stripe_mid=eb5d8b54-7d0d-4bbd-8e59-29f3ae691f7dc75be7; __stripe_sid=ac8eb94f-4a46-450a-95fc-dd5f2ac30274d55e53; amp_AMPLIT=a72VKGk7WN8pWK4CuxxiXx.ZGUyYjc1MzAtOWQ0MC00Y2U3LTlhODItMjEwYjJiYTkzNTY0..1hts622gu.1hts62okt.0.b.b; connect:sess=eyJ1c2VySWQiOiJkZTJiNzUzMC05ZDQwLTRjZTctOWE4Mi0yMTBiMmJhOTM1NjQifQ==; connect:sess.sig=sbSaiL-beCLy8imZK0cyaTljZyU",
      )
      .set("x-api-user", "de2b7530-9d40-4ce7-9a82-210b2ba93564")
      .set("host", "localhost:3000")
      .set("x-detail-originator", "detail")
      .send([
        {
          type: "habit",
          text: "Add a task to Habitica",
          notes: "Either a Habit, a Daily, or a To Do",
          up: true,
          down: false,
        },
        {
          type: "habit",
          text: "Click here to edit this into a bad habit you'd like to quit",
          notes: "Or delete from the edit screen",
          up: false,
          down: true,
        },
        {
          type: "todo",
          text: "Join Habitica (Check me off!)",
          notes: "You can either complete this To Do, edit it, or remove it.",
          byHabitica: true,
        },
        {
          type: "reward",
          text: "Reward yourself",
          notes: "Watch TV, play a game, eat a treat, it's up to you!",
          value: 10,
        },
      ]);
  });
});
